# Generated by Django 5.2.5 on 2025-08-07 12:10

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="RawMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("telegram_msg_id", models.CharField(max_length=64, unique=True)),
                ("text", models.TextField()),
                ("image", models.ImageField(blank=True, null=True, upload_to="")),
                ("ocr_text", models.TextField(blank=True, null=True)),
                ("received_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="TelegramSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chat_id", models.BigIntegerField(db_index=True, unique=True)),
                ("title", models.CharField(max_length=200)),
                ("reputation", models.FloatField(default=50.0)),
                ("message_count", models.PositiveIntegerField(default=0)),
                ("signal_count", models.PositiveIntegerField(default=0)),
                ("last_quality", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-reputation"],
            },
        ),
        migrations.CreateModel(
            name="TelegramUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("telegram_id", models.BigIntegerField(db_index=True, unique=True)),
                ("username", models.CharField(blank=True, max_length=64)),
                ("device_fingerprint", models.CharField(blank=True, max_length=256)),
                ("last_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Signal",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("asset", models.CharField(db_index=True, max_length=20)),
                ("action", models.CharField(max_length=10)),
                ("entry_price", models.FloatField()),
                ("stop_loss", models.FloatField()),
                ("target_prices", models.JSONField(blank=True, default=list)),
                ("timeframe", models.CharField(max_length=10)),
                ("trade_type", models.CharField(max_length=20)),
                ("confidence", models.FloatField(db_index=True)),
                (
                    "exit_origin",
                    models.CharField(
                        choices=[
                            ("EXPLICIT", "Explicit"),
                            ("INFERRED", "Inferred"),
                            ("UPDATED", "Updated"),
                        ],
                        default="EXPLICIT",
                        max_length=10,
                    ),
                ),
                ("is_conflict", models.BooleanField(default=False)),
                ("conflict_winner", models.BooleanField(null=True)),
                ("conflict_reason", models.TextField(blank=True)),
                ("reason", models.TextField(blank=True)),
                ("scored_at", models.DateTimeField(auto_now_add=True)),
                ("timestamp_utc", models.DateTimeField(db_index=True)),
                ("expires_at_utc", models.DateTimeField(db_index=True)),
                (
                    "dedup_key",
                    models.CharField(blank=True, db_index=True, max_length=128),
                ),
                (
                    "raw_message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.rawmessage",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp_utc"],
            },
        ),
        migrations.AddField(
            model_name="rawmessage",
            name="source",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.telegramsource"
            ),
        ),
        migrations.CreateModel(
            name="SummaryReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("period_type", models.CharField(max_length=10)),
                ("period_start", models.DateField()),
                ("period_end", models.DateField()),
                (
                    "tone",
                    models.CharField(
                        choices=[("humorous", "Humorous"), ("serious", "Serious")],
                        max_length=10,
                    ),
                ),
                ("summary_text", models.TextField()),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.telegramuser",
                    ),
                ),
            ],
            options={
                "ordering": ["-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "trial_start",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("trial_end", models.DateTimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("TRIAL", "Trial"),
                            ("ACTIVE", "Active"),
                            ("EXPIRED", "Expired"),
                            ("CANCELED", "Canceled"),
                        ],
                        default="TRIAL",
                        max_length=10,
                    ),
                ),
                ("paystack_reference", models.CharField(blank=True, max_length=128)),
                ("payment_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("discount_applied", models.BooleanField(default=False)),
                ("referral_code", models.CharField(max_length=10, unique=True)),
                ("referred_by", models.CharField(blank=True, max_length=10)),
                ("early_ref_count", models.PositiveIntegerField(default=0)),
                ("subscription_end", models.DateTimeField(blank=True, null=True)),
                ("mode", models.CharField(default="moderate", max_length=10)),
                ("risk_pct", models.FloatField(default=0.5)),
                ("allowed_symbols", models.JSONField(blank=True, default=list)),
                ("blocked_symbols", models.JSONField(blank=True, default=list)),
                ("trading_start", models.TimeField(blank=True, null=True)),
                ("trading_end", models.TimeField(blank=True, null=True)),
                ("allowed_weekdays", models.JSONField(blank=True, default=list)),
                ("min_volume", models.FloatField(default=0.0)),
                ("mt5_server", models.CharField(blank=True, max_length=100)),
                ("mt5_login", models.CharField(blank=True, max_length=32)),
                ("mt5_password", models.CharField(blank=True, max_length=256)),
                (
                    "trial_device",
                    models.CharField(
                        blank=True, max_length=256, null=True, unique=True
                    ),
                ),
                (
                    "trial_ip",
                    models.GenericIPAddressField(blank=True, null=True, unique=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.telegramuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Broadcast",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                (
                    "target_segment",
                    models.CharField(
                        choices=[
                            ("ALL", "All Users"),
                            ("ACTIVE", "Active Subscribers"),
                            ("TRIAL", "Trial Users"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="ALL",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "sender",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sent_broadcasts",
                        to="core.telegramuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AnalyticsEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("INGEST", "Ingest"),
                            ("PARSE", "Parse"),
                            ("ALERT", "Alert"),
                            ("EXEC", "Execute"),
                            ("FEEDBACK", "Feedback"),
                        ],
                        max_length=10,
                    ),
                ),
                ("duration_ms", models.IntegerField(blank=True, null=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "signal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.signal",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.telegramuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TradeOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("size", models.FloatField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("EXECUTED", "Executed"),
                            ("REJECTED", "Rejected"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=10,
                    ),
                ),
                ("expected_slippage", models.FloatField(blank=True, null=True)),
                ("actual_slippage", models.FloatField(blank=True, null=True)),
                ("slippage_cost", models.FloatField(blank=True, null=True)),
                ("placed_at", models.DateTimeField(blank=True, null=True)),
                ("executed_at", models.DateTimeField(blank=True, null=True)),
                ("profit_loss", models.FloatField(blank=True, null=True)),
                (
                    "signal",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="core.signal"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.telegramuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.telegramsource",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.telegramuser",
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "source")},
            },
        ),
        migrations.AddField(
            model_name="telegramsource",
            name="subscribed_by",
            field=models.ManyToManyField(
                related_name="sources",
                through="core.UserSource",
                to="core.telegramuser",
            ),
        ),
        migrations.CreateModel(
            name="BacktestResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("period_start", models.DateField()),
                ("period_end", models.DateField()),
                ("hit_rate", models.FloatField()),
                ("avg_risk_reward", models.FloatField()),
                ("expectancy", models.FloatField()),
                ("drawdown", models.FloatField()),
                ("computed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.telegramsource",
                    ),
                ),
            ],
            options={
                "unique_together": {("source", "period_start", "period_end")},
            },
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("useful", models.BooleanField()),
                ("corrected_fields", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "signal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedbacks",
                        to="core.signal",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.telegramuser",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["signal", "useful"],
                        name="core_feedba_signal__6d9326_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="DeviceBlock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("device_fingerprint", models.CharField(max_length=256)),
                ("ip_address", models.GenericIPAddressField()),
                ("reason", models.CharField(max_length=200)),
                ("blocked_at", models.DateTimeField(auto_now_add=True)),
                (
                    "telegram_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blocks",
                        to="core.telegramuser",
                    ),
                ),
            ],
            options={
                "unique_together": {("device_fingerprint", "ip_address")},
            },
        ),
        migrations.CreateModel(
            name="ExecutionAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("attempt_number", models.PositiveIntegerField()),
                ("request_payload", models.JSONField(blank=True, default=dict)),
                ("response_data", models.JSONField(blank=True, default=dict)),
                ("duration_ms", models.IntegerField(blank=True, null=True)),
                ("success", models.BooleanField(default=False)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("attempted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "trade_order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attempts",
                        to="core.tradeorder",
                    ),
                ),
            ],
            options={
                "unique_together": {("trade_order", "attempt_number")},
            },
        ),
    ]
